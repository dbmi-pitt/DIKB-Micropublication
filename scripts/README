At the present time, these scripts are solely intended to prototype a
DIKB evidence base that uses MP and NP. 

############################################################################
pre-requisites
############################################################################

python libraries:

(1) Bio 
from "http://biopython.org/wiki/Download"

(2) rdflib >=4.2 with SPARQLWrapper 

(4) rdflib-jsonld
from "https://github.com/RDFLib/rdflib-jsonld"

############################################################################
The program currently works by attempting to translate data in the
current DIKB evidence base to an RDF graph with NP and MP according to
the model diagrammed in the design folder.
############################################################################

(1) run python script to send sparql query against virtuoso endpoint.
output is a tsv file contains DDI assertions associated with evidences in DIKB.

$ python query-DIKB-DDIs.py

(2) run script to create XML/RDF graph represents drug drug
interactions in OA and Micropublication standard. This tries to fill
in some parts of the model using simple string matching. 

$ python dikbv1.2-to-MP-plus-OA.py3

(3) add in the nanopublication assertion, provenance, and supporting
graphs

$ python  ../data/initial-dikb-mp-oa-Aug2014.xml > ../data/initial-dikb-nanopub-Nov2014.trig

(4) Loading the data into an RDF endpoint. For example, see the
documentation
http://docs.openlinksw.com/virtuoso/fn_ttlp_mt_local_file.html. NOTE:
this is not quite worked out as of 11/21/2014. Once it is, the
following test query should work:

select *
where {
 ?nanopub <http://www.nanopub.org/nschema#hasAssertion> ?asrt.
  graph ?asrt
  { ?s <http://dbmi-icode-01.dbmi.pitt.edu/dikb/vocab/interactsWith> ?o.}
} LIMIT 10



############################################################################
Deployment
############################################################################

load mp graph "data/inferred-initial-graph-oa-mp.xml" to RDF endpoint as named graph
"http://purl.org/mp/initial-graph-oa-mp"

load mp owl, inferred by protege "mp_1.17_inferred.owl" to RDF endpoint as named graph "http://purl.org/mp/inferred_1_17_owl"


############################################################################
Benchmark query performance
############################################################################

--------------------------
Scenarios
--------------------------

Case 1:

Benchmark query performace by recording query execution time cost with increasing size of MP graph. Firstly, MP graph generation program create orginal MP graph based onPDDIs from existing DIKB (Drug interaction knowledge base 1.2). Then, MP graph with 2 folds, 3 folds, 4 folds, 5 folds will be create as comparison. All items in MP graph will have same relationships compare to original graph so that all items in folded graph should be evenly distributed.

Upload 5 MP graphs to a single virtuoso endpoint. For each example query, output benchmark table will have three columns including queried graph, number of folds, time costs. Besides, there is a time cost diagram for each query that describes time costs with increasing time of folds. 


Case 2:

Create 5 MP graphs as case 1 did. Load graph one by one to run benchmark query testing program to see if number of graphs in a single endpoint will significantly affect query performance. 

----------------------------
How to run benchmark testing
----------------------------

(1) create graph with number of folds

$ dikbv1.2-to-MP-plus-OA.py <number of folds> <output graph> <output csv>

ex. $ python dikbv1.2-to-MP-plus-OA.py 3 "../data/dikb-mp-fold-3.xml" "../data/processed-dikb-ddis-fold-3.tsv"

ex. $ python dikbv1.2-to-MP-plus-OA.py 1 "../data/initial-dikb-mp-oa.xml" "../data/processed-dikb-ddis.tsv"

(2) run protege inference engine for each graph and load exported graph into Virtuso via isql-vt or via browser http://<hostname>:8890/conductor

(3) run query testing program

$ python queryTesting.py


----------------------------
Current testing cases:
----------------------------

(1) original MP graph: 3414 triples, 552 KB

(2) 3 folds: 22907 triples, 3.5 MB

(3) 5 folds: 100883 triples, 16 MB

(4) 7 folds: 412787 triples, 62 MB